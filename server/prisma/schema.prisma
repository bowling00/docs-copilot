datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Project {
  id            String         @id @default(uuid())
  name          String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  userId        String
  docs          Doc[]
  conversations Conversation[]
  user          User           @relation(fields: [userId], references: [id])
  projectDetail ProjectDetail?
}

model ProjectDetail {
  id        String   @id @default(uuid())
  prompt    String?
  questions String[]
  whiteList String[]
  ipLimit   Int?
  projectId String   @unique
  Project   Project  @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Doc {
  id          String    @id @default(uuid())
  name        String?
  description String?
  indexs      Index[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  project     Project[]
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

model Index {
  id        String                 @id @default(uuid())
  content   String
  vector    Unsupported("vector")?
  source    String?
  namespace String?
  metadata  Json?
  docId     String
  doc       Doc                    @relation(fields: [docId], references: [id])
}

model Conversation {
  id        String    @id @default(uuid())
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  projectId String?
  project   Project?  @relation(fields: [projectId], references: [id])
}

model Message {
  id             String        @id @default(uuid())
  content        String
  role           MessageRole
  ratingValue    Int?
  createdAt      DateTime      @default(now())
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
}

enum MessageRole {
  system
  ai
  hunman
}

model User {
  id          String              @id @default(uuid())
  githubId    String?             @unique
  username    String              @unique
  email       String?             @unique
  password    String?
  accountType UserAccountTypeEnum @default(email)
  createdAt   DateTime            @default(now())
  devices     Device[]
  logs        Log[]
  profile     UserProfile?
  roles       UsersRole[]
  Project     Project[]
  Docs        Doc[]
}

model UserProfile {
  id          String            @id @default(uuid())
  gender      ProfileGenderEnum
  avatar      String?
  photo       String?
  description String?
  githubLogin String?
  githubName  String?
  userId      String            @unique
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Device {
  id                    String   @id @default(uuid())
  deviceId              String   @unique
  deviceType            String
  clientIp              String
  lastLoginAt           DateTime @default(now())
  refreshToken          String?
  refreshTokenExpiresAt BigInt?
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Log {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  path      String
  data      String
  result    Int
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String
  UsersRole UsersRole?
}

model UsersRole {
  userId String @unique
  roleId Int    @unique
  roles  Role   @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProfileGenderEnum {
  male
  female
  other
}

enum UserAccountTypeEnum {
  email
  github
}
